这段代码是下面这个题目的solution.

Largest Sum Of Valid Numbers
Given a 2D array A[8][8] with all integer numbers if we take a number a[i][j], then we cannot take its 8 neighboring cells. 
How should we take the numbers to make their sum as large as possible.

之所以用这段代码是因为他精巧地结合了dynamic programming和binary operation的技巧，从而用最少的时间和空间达到了对可能矩阵内数字和的搜索和检测。

public int largestSum(int[][] matrix) {

		int k = 8;

		List<Integer> configs = validConfigs(k);

		int[][] largest = new int[k][configs.size()];

		for (int i = 0; i < k; i++) {

			for (int j = 0; j < configs.size(); j++) {

				largest[i][j] = Integer.MIN_VALUE;

				if (i == 0) {

					largest[i][j] = sum(matrix[i], configs.get(j));

				} else {

					for (int l = 0; l < configs.size(); l++) {

						if (noConflict(configs.get(j), configs.get(l))) {

							largest[i][j] = Math.max(largest[i][j], largest[i - 1][l] + 
											sum(matrix[i], configs.get(j)));

						}

					}

				}
	
			}

		}

		int result = largest[k - 1][0];

		for (int i = 1; i < configs.size(); i++) {

			result = Math.max(result, largest[k - 1][i]);

		}

		return result;

	}
	
	public List<Integer> validConfigs(int k) {
		
		List<Integer> configs = new ArrayList<>();
		this.helper(configs, 0, k, 0);
		return configs;
		
	}
	
	public void helper(List<Integer> configs, int index, int k, int cur) {

		configs.add(cur);
		for(int i = index; i < k; i++) {

			helper(configs, i + 2, k, cur | (1 << i));

		}

	}

	public boolean noConflict(int c1, int c2) {

		return (c1 & c2) == 0 && ((c1 << 1) & c2) == 0 && (c1 & (c2 << 1)) == 0;

	}
	
	public int sum(int[] array, int config) {
		
		int sum = 0;

		for (int i = 0; i < array.length; i++) {

			if (((config >>> i) & 1) != 0) {

				sum += array[i];

			}

		}

		return sum;
		
	}
